#include "{{header_name}}"
#include <stdexcept>
#include <fstream>
#include <cstring>

{{module_name}}::{{module_name}}(const std::string& wasm_path) {
    engine_ = std::make_unique<wasmtime::Engine>();
    store_ = std::make_unique<wasmtime::Store>(*engine_);

    // Load the Wasm file into a vector
    std::ifstream file(wasm_path, std::ios::binary | std::ios::ate);
    if (!file) throw std::runtime_error("Unable to open wasm file");
    std::streamsize size = file.tellg();
    file.seekg(0, std::ios::beg);
    std::vector<uint8_t> buffer(size);
    if (!file.read(reinterpret_cast<char*>(buffer.data()), size)) {
        throw std::runtime_error("Error reading wasm file");
    }

    // Compile module
    wasmtime::Span<uint8_t> wasm_span(buffer.data(), buffer.size());
    auto result_module = wasmtime::Module::compile(*engine_, wasm_span);
    if (!result_module) {
        throw std::runtime_error("Failed to compile module");
    }
    module_ = std::make_unique<wasmtime::Module>(result_module.unwrap());

    // Create instance
    auto result_instance = wasmtime::Instance::create(*store_, *module_, {});
    if (!result_instance) {
        throw std::runtime_error("Failed to instantiate module");
    }
    instance_ = std::make_unique<wasmtime::Instance>(result_instance.unwrap());

    // Extract memory (optional, only if exported)
    auto export_opt = instance_->get(*store_, "memory");
    if (!export_opt.has_value()) {
        throw std::runtime_error("Failed to find exported memory");
    }
    auto mem_ptr = std::get_if<wasmtime::Memory>(&*export_opt);
    if (!mem_ptr) {
        throw std::runtime_error("Exported 'memory' is not a Memory");
    }
    memory_ = std::make_unique<wasmtime::Memory>(*mem_ptr);

    // Bind exported functions
    {{#each functions}}
    {
        auto maybe_export = instance_->get(*store_, "{{name}}");
        if (!maybe_export.has_value()) {
            throw std::runtime_error("Export '{{name}}' not found");
        }
        auto func_ptr = std::get_if<wasmtime::Func>(&*maybe_export);
        if (!func_ptr) {
            throw std::runtime_error("Export '{{name}}' is not a function");
        }
        {{name}}_func_ = std::make_unique<wasmtime::Func>(*func_ptr);
    }
    {{/each}}
}

{{module_name}}::~{{module_name}}() = default;

{{#each functions}}
{{{return_type}}} {{../module_name}}::{{name}}({{#each args}}{{{this.type}}} {{this.name}}{{#unless @last}}, {{/unless}}{{/each}}) {
    std::vector<wasmtime::Val> params;
    uint8_t* mem_data = memory_->data(*store_).data();

    {{#each args}}
    {{#if (or (eq this.type "const char*") (eq this.type "char*"))}}
    int32_t offset_{{@index}} = 1024 + {{@index}} * 256;
    {{/if}}
    {{#if (eq this.type "const char*")}}
    int32_t len_{{@index}} = static_cast<int32_t>(strlen({{this.name}}));
    memcpy(mem_data + offset_{{@index}}, {{this.name}}, len_{{@index}});
    params.push_back(wasmtime::Val(offset_{{@index}}));
    params.push_back(wasmtime::Val(len_{{@index}}));
    {{else if (eq this.type "char*")}}
    params.push_back(wasmtime::Val(offset_{{@index}}));
    {{else}}
    params.push_back(wasmtime::Val({{this.name}}));
    {{/if}}
    {{/each}}

    auto result = {{name}}_func_->call(*store_, params);
    if (!result) {
        throw std::runtime_error("Error invoking '{{name}}': " + result.err().message());
    }

    {{#if (eq return_type "void")}}
    const char* start = reinterpret_cast<const char*>(mem_data + offset_0);
    size_t len = strnlen(start, 1024); // safety limit
    char* str_out = new char[len + 1];
    {{#with (lookup args 0) as | ret_arg |}}
    memcpy({{ret_arg.name}}, start, len);
    {{ret_arg.name}}[len] = '\0';
    {{/with}}
    {{else}}
    auto results = result.unwrap();
    return results[0].{{wasm_unwrap}}();
    {{/if}}
}
{{/each}}

